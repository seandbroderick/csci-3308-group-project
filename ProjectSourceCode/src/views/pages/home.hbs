<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Parking Map</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
  
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

  <!-- Custom CSS -->
  <link rel="stylesheet" href="/resources/css/home.css" />
</head>
<body>
  <!-- Map Area -->
  <div class="container my-5">
    <div class="map-container">
      <div class="controls-container">
        <div class="location-info" id="locationStatus">
          <!-- Status messages will appear here -->
        </div>
        <div class="map-controls">
          <div class="search-container">
            <input
              type="text"
              id="searchInput"
              class="form-control"
              placeholder="Search for a location..."
            >
          </div>
          <div class="location-button-container">
            <button id="getCurrentLocation" class="btn btn-primary">
              <i class="bi bi-geo-alt"></i> Use My Location
            </button>
          </div>
        </div>
      </div>
      <div class="map-wrapper">
        <div id="map"></div>
      </div>
    </div>
  </div>

  <!-- Promo Section -->
  <section class="promo-section">
    <div class="container">
      <div class="row align-items-center">
        <!-- Left Column - Images -->
        <div class="col-lg-6">
          <div class="image-stack fade-in">
            <div class="image-stack__item image-stack__item--top">
              <img src="/resources/img/P4RK1.jpeg" alt="Parking spot" class="img-fluid rounded">
            </div>
            <div class="image-stack__item image-stack__item--middle">
              <img src="/resources/img/P4RK3.jpeg" alt="Parking garage" class="img-fluid rounded">
            </div>
            <div class="image-stack__item image-stack__item--bottom">
              <img src="/resources/img/P4RK03.jpeg" alt="Parking lot" class="img-fluid rounded">
            </div>
          </div>
        </div>
        
        <!-- Right Column - Text -->
        <div class="col-lg-6 ps-lg-5 mt-5 mt-lg-0">
          <div class="feature-list">
            <div class="feature-item mb-5 slide-in-right">
              <h3 class="promo-heading">
                <span class="d-block display-4 fw-bold">SAVE TIME</span>
                <p class="lead mt-3">Book a space in just a few easy clicks</p>
              </h3>
            </div>
            
            <div class="feature-item mb-5 slide-in-right" data-delay="200">
              <h3 class="promo-heading">
                <span class="d-block display-4 fw-bold">DISCOVER</span>
                <span class="d-block display-4 fw-bold">AMAZING</span>
                <span class="d-block display-2 fw-bold text-primary">SPACES</span>
              </h3>
              <p class="lead mt-3">
                Find parking anywhere, for now or for later
              </p>
            </div>
            
            <div class="feature-item slide-in-right" data-delay="400">
              <h3 class="promo-heading">
                <span class="d-block display-4 fw-bold">DRIVE</span>
                <span class="d-block display-4 fw-bold">ARRIVE</span>
                <span class="d-block display-2 fw-bold text-primary">& PARK</span>
              </h3>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- FAQ Section -->
  <section class="faq-section">
    <div class="container">
      <div class="text-center mb-5 fade-in">
        <h2 class="display-4 fw-bold mb-3">
          <i class="bi bi-question-circle-fill me-2"></i>FAQ
        </h2>
        <p class="text-muted">Common questions about parking with us</p>
      </div>
      
      <div class="accordion" id="faqAccordion">
        <!-- Question 1 -->
        <div class="accordion-item mb-3 border-0 fade-in" data-delay="100">
          <h3 class="accordion-header">
            <button class="accordion-button collapsed rounded shadow-sm" type="button" 
                    data-bs-toggle="collapse" data-bs-target="#faq1"
                    aria-expanded="false">
              <i class="bi bi-search me-2"></i> How do I find parking locations?
            </button>
          </h3>
          <div id="faq1" class="accordion-collapse collapse" 
               data-bs-parent="#faqAccordion">
            <div class="accordion-body bg-light rounded-bottom">
              Use the search bar at the top to enter your destination, then check the map 
              for available spots. Available spaces appear in <span class="text-success">green</span>.
            </div>
          </div>
        </div>

        <!-- Question 2 -->
        <div class="accordion-item mb-3 border-0 fade-in" data-delay="200">
          <h3 class="accordion-header">
            <button class="accordion-button collapsed rounded shadow-sm" type="button" 
                    data-bs-toggle="collapse" data-bs-target="#faq2"
                    aria-expanded="false">
              <i class="bi bi-clock-history me-2"></i> Can I see my parking history?
            </button>
          </h3>
          <div id="faq2" class="accordion-collapse collapse" 
               data-bs-parent="#faqAccordion">
            <div class="accordion-body bg-light rounded-bottom">
              Yes! Your past parking sessions are saved under "My Passes" on the home page.
            </div>
          </div>
        </div>

        <!-- Question 3 -->
        <div class="accordion-item mb-3 border-0 fade-in" data-delay="300">
          <h3 class="accordion-header">
            <button class="accordion-button collapsed rounded shadow-sm" type="button" 
                    data-bs-toggle="collapse" data-bs-target="#faq3"
                    aria-expanded="false">
              <i class="bi bi-headset me-2"></i> How do I contact support?
            </button>
          </h3>
          <div id="faq3" class="accordion-collapse collapse" 
               data-bs-parent="#faqAccordion">
            <div class="accordion-body bg-light rounded-bottom">
              Use the "Contact Us" form below or email support@p4rk.com. 
              We respond within 24 hours.
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Parking Details Modal -->
  <div class="modal fade" id="parkingDetailsModal" tabindex="-1" aria-labelledby="parkingDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="parkingDetailsModalLabel">Parking Details</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="parkingDetailsContent">
          <!-- Details will be populated dynamically -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Google Maps JavaScript -->
  <script>
    let map;
    let userMarker;
    let searchMarker;
    let parkingMarkers = []; // Array to hold parking location markers
    let activeInfoWindow = null; // Variable to hold the currently open info window
    const defaultLocation = { lat: 40.0150, lng: -105.2705 }; // Boulder, CO

    // Initialize map with default location
    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        center: defaultLocation,
        zoom: 14,
        mapId: 'DEMO_MAP_ID',
        mapTypeControl: false,
        fullscreenControl: false,
        streetViewControl: false,
        zoomControl: true,
        zoomControlOptions: {
          position: google.maps.ControlPosition.RIGHT_BOTTOM,
        },
      });

      // Create a search box
      const searchInput = document.getElementById("searchInput");
      const searchBox = new google.maps.places.SearchBox(searchInput);

      // Bias the search box results towards current map's viewport
      map.addListener('bounds_changed', () => {
        searchBox.setBounds(map.getBounds());
      });

      // Listen for the event fired when user selects a prediction
      searchBox.addListener('places_changed', () => {
        const places = searchBox.getPlaces();

        if (places.length === 0) return;
      
        // Remove previous search marker if it exists
        if (searchMarker) {
          searchMarker.setMap(null);
        }

        // Clear existing parking markers
        clearParkingMarkers();

        // For each place, get the location
        const place = places[0];
        
        if (!place.geometry || !place.geometry.location) {
          console.log("Returned place contains no geometry");
          return;
        }

        // Create a new marker for the place
        searchMarker = new google.maps.Marker({
          map,
          position: place.geometry.location,
          title: place.name,
          animation: google.maps.Animation.DROP,
          icon: {
            url: "https://maps.google.com/mapfiles/ms/icons/red-dot.png"
          }
        });

        // Add info window with place name
        const infoWindow = new google.maps.InfoWindow({
          content: `<div><strong>${place.name}</strong></div>`
        });

        searchMarker.addListener('click', () => {
          if (activeInfoWindow) {
            activeInfoWindow.close();
          }
          infoWindow.open(map, searchMarker);
          activeInfoWindow = infoWindow;
        });

        // Center and zoom map to show selected location
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(16);
        }

        // Show success message
        document.getElementById('locationStatus').innerHTML = `<p class="text-success">Found: ${place.name}</p>`;
        setTimeout(() => {
          document.getElementById('locationStatus').innerHTML = '';
        }, 3000);

        // Find nearby parking locations
        findNearbyParking(place.geometry.location);
      });

      // Try to get user's current location
      getUserLocation();

      // Add button to recenter map on user location
      const locationButton = document.getElementById("getCurrentLocation");
      if (locationButton) {
        locationButton.addEventListener("click", getUserLocation);
      } else {
        console.error("Location button not found");
      }
    }

    // Clear all parking markers from the map
    function clearParkingMarkers() {
      for (let i = 0; i < parkingMarkers.length; i++) {
        parkingMarkers[i].setMap(null);
      }
      parkingMarkers = [];
    }

    // Find nearby parking locations
    function findNearbyParking(location) {
      const locationStatus = document.getElementById('locationStatus');
      locationStatus.innerHTML = '<p class="text-info"><i class="bi bi-hourglass-split"></i> Finding nearby parking...</p>';

      // Check if location is in the right format and convert if needed
      const lat = typeof location.lat === 'function' ? location.lat() : location.lat;
      const lng = typeof location.lng === 'function' ? location.lng() : location.lng;

      // Use API endpoint to get real parking data
      fetch(`api/parking?lat=${lat}&lng=${lng}`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
          }
          return response.json();
        })
        .then(data => {
          // Clear previous parking markers
          clearParkingMarkers();

          // Check if the response contains an error
          if (data.error) {
            throw new Error(data.error.description || "API returned an error");
          }

          // Check if we have parking results
          if (!data.results || data.results.length === 0) {
            locationStatus.innerHTML = `<p class="text-warning"><i class="bi bi-exclamation-triangle"></i> No parking locations found nearby</p>`;
            setTimeout(() => {
              locationStatus.innerHTML = '';
            }, 3000);
            return;
          }

          // Create markers for each parking location
          const maxResults = Math.min(data.results.length, 15);
          
          for (let i = 0; i < maxResults; i++) {
            const place = data.results[i];
            createParkingMarker(place);
          }

          locationStatus.innerHTML = `<p class="text-success"><i class="bi bi-check-circle"></i> Found ${maxResults} parking locations nearby</p>`;
          setTimeout(() => {
            locationStatus.innerHTML = '';
          }, 3000);
        })
        .catch(error => {
          console.error("Error fetching parking data:", error);
          locationStatus.innerHTML = `
            <p class="text-danger mb-0"><i class="bi bi-exclamation-triangle"></i> ${error.message || "Could not fetch parking data"}</p>
            <p class="small text-muted">Showing simulated data instead</p>
          `;
          
          // If real API fails, simulate parking spots for demo purposes
          // This would typically be handled by the server, but added here for clarity
          setTimeout(() => {
            locationStatus.innerHTML = '';
          }, 5000);
        });
    }

    // Create a marker for a parking location from HERE API data
    function createParkingMarker(place) {
      // Convert HERE API parking spot to map marker
      const position = {
        lat: place.position[0],
        lng: place.position[1]
      };
      
      const marker = new google.maps.Marker({
        map: map,
        position: position,
        title: place.title || 'Parking', // Changed from parkingSpot.title
        animation: google.maps.Animation.DROP,
        icon: {
          url: "https://maps.google.com/mapfiles/ms/icons/green-dot.png"
        }
      });

      // Get parking details
      const parkingData = {
      id: place.id,
      name: place.title || 'Parking Location',
      address: place.vicinity || 'Address not available',
      rate: place.paymentInfo?.rate || 'N/A',
      status: determineParkingStatus(place),
      hours: formatHours(place.openingHours),
      capacity: place.totalSpaces || 'N/A',
      available: place.availableSpaces || 'N/A',
      paymentTypes: formatPaymentTypes(place.paymentInfo?.methods),
      operator: place.operator || 'N/A',
      contactInfo: place.contacts?.[0]?.phone || 'N/A'
      };

      marker.parkingId = place.id;
      marker.parkingData = parkingData;

      // Also update the HTML template to only show fields that have valid data
      const parkingCardContent = `
        <div class="parking-info-card">
          <h5 class="parking-title">${parkingData.name}</h5>
          <div class="parking-details">
            <div class="parking-address">${parkingData.address}</div>
            
            <div class="parking-rate">
              ${parkingData.rate !== 'N/A' ? 
                `<strong>Rate:</strong> $${parkingData.rate}/hr` : 
                `<strong>Rate:</strong> N/A`
              }
            </div>
            
            <div class="parking-status ${getStatusClass(parkingData.status)}">
              <strong>Status:</strong> ${parkingData.status}
            </div>
            
            <div class="parking-hours">
              <strong>Hours:</strong> ${parkingData.hours}
            </div>
            
            ${parkingData.capacity !== 'N/A' ? 
              `<div class="parking-capacity">
                <strong>Capacity:</strong> ${parkingData.available} / ${parkingData.capacity} spaces
              </div>` : ''
            }
            
            ${parkingData.paymentTypes ? 
              `<div class="parking-payment">
                <strong>Payment:</strong> ${parkingData.paymentTypes}
              </div>` : ''
            }
          </div>
          
          <div class="parking-actions">
            <a href="https://www.google.com/maps/dir/?api=1&destination=${position.lat},${position.lng}" 
              class="btn btn-sm btn-primary directions-btn" target="_blank">
              <i class="bi bi-sign-turn-right"></i> Directions
            </a>
            <button class="btn btn-sm btn-outline-primary details-btn" onclick="showParkingDetails('${parkingData.id}')">
              <i class="bi bi-info-circle"></i> Details
            </button>
          </div>
        </div>
      `;

      // Create info window with parking details
      const infoWindow = adjustInfoWindowSize(new google.maps.InfoWindow({
        content: parkingCardContent,
        maxWidth: 320,
      }));

      // Add click listener to marker to open info window
      marker.addListener('click', () => {
        // Close any open info windows first
        if (activeInfoWindow) {
          activeInfoWindow.close();
        }

        infoWindow.open(map, marker);
        activeInfoWindow = infoWindow;
      });

      // Add this marker to our collection
      parkingMarkers.push(marker);
    }

    // Format hours from HERE API data
    function formatHours(openingHours) {
      if (!openingHours) {
        return 'Hours not available';
      }
      
      if (openingHours.text === 'N/A') {
        return 'Hours not available';
      }
      
      return openingHours.text || '24/7';
    }

    // Format payment types from HERE API data
    function formatPaymentTypes(methods) {
      if (!methods || methods.length === 0 || methods[0] === 'N/A') {
        return 'Payment details not available';
      }
      
      return methods.join(', ');
    }

    // Determine parking status from HERE API data
    function determineParkingStatus(parkingSpot) {
      if (parkingSpot.availableSpaces !== undefined && 
          parkingSpot.availableSpaces !== 'N/A' && 
          parkingSpot.totalSpaces !== undefined &&
          parkingSpot.totalSpaces !== 'N/A') {
        
        // Convert to numbers if they're strings
        const available = typeof parkingSpot.availableSpaces === 'string' ? 
          parseInt(parkingSpot.availableSpaces) : parkingSpot.availableSpaces;
        
        const total = typeof parkingSpot.totalSpaces === 'string' ? 
          parseInt(parkingSpot.totalSpaces) : parkingSpot.totalSpaces;
        
        if (!isNaN(available) && !isNaN(total) && total > 0) {
          const availablePercentage = (available / total) * 100;
          
          if (availablePercentage > 50) {
            return 'Available';
          } else if (availablePercentage > 20) {
            return 'Limited Spots';
          } else if (availablePercentage > 0) {
            return 'Almost Full';
          } else {
            return 'Full';
          }
        }
      }
      
      // If we don't have valid capacity info, return an estimated status
      return 'Status Unknown';
    }

    // Helper function to determine status class for styling
    function getStatusClass(status) {
      if (!status) return '';
      
      const statusLower = status.toLowerCase();
      if (statusLower.includes('available')) {
        return 'status-available';
      } else if (statusLower.includes('limited') || statusLower.includes('almost')) {
        return 'status-busy';
      } else if (statusLower.includes('full')) {
        return 'status-full';
      }
      return '';
    }

    // Get user's current location
    function getUserLocation() {
      console.log("Getting user location");
      const locationStatus = document.getElementById('locationStatus');

      if (navigator.geolocation) {
        locationStatus.innerHTML = '<p class="text-info"><i class="bi bi-hourglass-split"></i> Getting your location...</p>';

        navigator.geolocation.getCurrentPosition(
          (position) => {
            console.log("Location obtained:", position.coords.latitude, position.coords.longitude);
            const userLocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            };

            // Center map on user location
            map.setCenter(userLocation);
            map.setZoom(14);

            // Add or update marker for user location
            if (userMarker) {
              userMarker.setPosition(userLocation);
            } else {
              userMarker = new google.maps.Marker({
                position: userLocation,
                map: map,
                title: "Your location",
                icon: {
                  url: "https://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                },
                animation: google.maps.Animation.DROP
              });

              // Add info window to user marker
              const userInfoWindow = new google.maps.InfoWindow({
                content: `<div><strong>Your Location</strong></div>`
              });
              
              userMarker.addListener('click', () => {
                userInfoWindow.open(map, userMarker);
              });
            }

            locationStatus.innerHTML = '<p class="text-success"><i class="bi bi-check-circle"></i> Location found!</p>';

            // Find nearby parking locations
            findNearbyParking(userLocation);

            setTimeout(() => {
              locationStatus.innerHTML = '';
            }, 3000);
          },
          (error) => {
            console.error("Error getting location", error);
            let errorMessage = "Unable to retrieve your location.";

            switch(error.code) {
              case error.PERMISSION_DENIED:
                errorMessage = "Location access denied. Please enable location services.";
                break;
              case error.POSITION_UNAVAILABLE:
                errorMessage = "Location information is unavailable.";
                break;
              case error.TIMEOUT:
                errorMessage = "The request to get your location timed out.";
                break;
            }

            locationStatus.innerHTML = `<p class='text-danger'><i class="bi bi-exclamation-triangle"></i> ${errorMessage}</p>`;

            // Use default location
            map.setCenter(defaultLocation);
          }
        );
      } else {
        locationStatus.innerHTML = "<p class='text-danger'><i class='bi bi-exclamation-triangle'></i> Geolocation is not supported by your browser.</p>";
      }
    }

    function showParkingDetails(parkingId) {
      // Find the parking marker by ID
      const marker = parkingMarkers.find(m => m.parkingId === parkingId);
      
      if (!marker || !marker.parkingData) {
        console.error("Could not find parking data for ID:", parkingId);
        return;
      }
      
      const parking = marker.parkingData;
      const modal = new bootstrap.Modal(document.getElementById('parkingDetailsModal'));
      
      // Format distance
      const distance = parking.distance ? 
        `${(parking.distance/1000).toFixed(1)} km` : 
        'Distance unknown';
      
      // Calculate estimated walking time (assuming 5km/h walking speed)
      const walkingTime = parking.distance ? 
        `${Math.ceil(parking.distance/1000 * 12)} min` : 
        'Unknown';
      
      // Calculate fee estimates
      const hourlyRate = parking.rate !== 'N/A' ? parseFloat(parking.rate) : 3.50;
      const twoHourFee = (hourlyRate * 2).toFixed(2);
      const fourHourFee = (hourlyRate * 4).toFixed(2);
      const allDayFee = (hourlyRate * 8).toFixed(2);
      
      // Determine features based on the parking name/title
      const features = [];
      
      // Default features all parking locations might have
      features.push('Well-lit facility');
      
      if (parking.name.toLowerCase().includes('garage')) {
        features.push('Covered parking');
        features.push('Weather protection');
      }
      
      if (parking.name.toLowerCase().includes('university') || 
          parking.name.toLowerCase().includes('campus')) {
        features.push('Campus shuttle available');
      }
      
      if (parking.name.toLowerCase().includes('center') || 
          parking.name.toLowerCase().includes('downtown')) {
        features.push('Close to shopping');
      }
      
      if (parking.paymentTypes && 
          parking.paymentTypes.toLowerCase().includes('credit')) {
        features.push('Credit card payment');
      }
      
      // Always include these common features
      features.push('Security cameras');
      features.push('Accessible spots available');
      
      // Populate modal content
      document.getElementById('parkingDetailsModalLabel').textContent = parking.name;
      
      document.getElementById('parkingDetailsContent').innerHTML = `
        <div class="p-3">
          <div class="row mb-4">
            <div class="col-md-8">
              <h6 class="fw-bold mb-3">${parking.name}</h6>
              <p class="mb-2"><i class="bi bi-geo-alt-fill text-danger me-2"></i>${parking.address}</p>
              <p class="mb-2"><i class="bi bi-ruler me-2"></i>Distance: ${distance} (${walkingTime} walk)</p>
              <p class="mb-0"><i class="bi bi-clock me-2"></i>Hours: ${parking.hours}</p>
            </div>
            
            <div class="col-md-4">
              <div class="badge bg-${getStatusBadgeColor(parking.status)} p-2 w-100 mb-2">
                <i class="bi bi-p-circle-fill me-2"></i>${parking.status}
              </div>
              
              ${parking.capacity !== 'N/A' ? 
                `<div class="progress mt-1 mb-2" role="progressbar" style="height: 10px;">
                  <div class="progress-bar bg-${getStatusBadgeColor(parking.status)}" 
                    style="width: ${calculateCapacityPercentage(parking)}%"></div>
                </div>
                <small>${parking.available} of ${parking.capacity} spots available</small>` : 
                '<small class="text-muted">Capacity information not available</small>'
              }
            </div>
          </div>
          
          <hr>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <h6 class="fw-bold"><i class="bi bi-cash-coin me-2"></i>Pricing Information</h6>
              <table class="table table-sm">
                <tr>
                  <td>Hourly Rate</td>
                  <td class="fw-bold">$${parking.rate !== 'N/A' ? parking.rate : '3.50'}</td>
                </tr>
                <tr>
                  <td>2 Hours</td>
                  <td>$${twoHourFee}</td>
                </tr>
                <tr>
                  <td>4 Hours</td>
                  <td>$${fourHourFee}</td>
                </tr>
                <tr>
                  <td>All Day</td>
                  <td>$${allDayFee}</td>
                </tr>
              </table>
              <p class="small text-muted">
                Payment Methods: ${parking.paymentTypes || 'Various payment methods'}
              </p>
            </div>
            
            <div class="col-md-6">
              <h6 class="fw-bold"><i class="bi bi-star me-2"></i>Facility Features</h6>
              <ul class="list-unstyled">
                ${features.map(feature => 
                  `<li class="mb-1"><i class="bi bi-check-circle-fill text-success me-2"></i>${feature}</li>`
                ).join('')}
              </ul>
            </div>
          </div>
          
          <hr>
          
          <div class="d-flex justify-content-between align-items-center">
            ${parking.contactInfo !== 'N/A' ? 
              `<p class="mb-0"><i class="bi bi-telephone me-2"></i>${parking.contactInfo}</p>` : 
              `<p class="mb-0 text-muted"><i class="bi bi-building me-2"></i>Operated by: ${parking.operator}</p>`
            }
            <a href="https://www.google.com/maps/dir/?api=1&destination=${marker.getPosition().lat()},${marker.getPosition().lng()}" 
              class="btn btn-primary" target="_blank">
              <i class="bi bi-sign-turn-right-fill me-2"></i>Get Directions
            </a>
          </div>
          
          <div class="small text-muted mt-4 text-center">
            Data provided by HERE Technologies Parking API
          </div>
        </div>
      `;
      
      modal.show();
    }

    // Helper function to get badge color based on status
    function getStatusBadgeColor(status) {
      if (!status) return 'secondary';
      
      const statusLower = status.toLowerCase();
      if (statusLower.includes('available')) {
        return 'success';
      } else if (statusLower.includes('limited') || statusLower.includes('almost')) {
        return 'warning';
      } else if (statusLower.includes('full')) {
        return 'danger';
      }
      return 'secondary';
    }

    // Helper function to calculate capacity percentage
    function calculateCapacityPercentage(parking) {
      if (parking.availableSpaces === 'N/A' || parking.totalSpaces === 'N/A') {
        return 50; // Default to 50% if no data
      }
      
      const available = typeof parking.availableSpaces === 'string' ? 
        parseInt(parking.availableSpaces) : parking.availableSpaces;
      
      const total = typeof parking.totalSpaces === 'string' ? 
        parseInt(parking.totalSpaces) : parking.totalSpaces;
      
      if (isNaN(available) || isNaN(total) || total === 0) {
        return 50; // Default to 50% if invalid data
      }
      
      // Calculate percentage of available spots
      return Math.min(100, Math.max(0, (available / total) * 100));
    }

    // Add this function after adjustInfoWindowSize
    function adjustInfoWindowSize(infoWindow) {
      google.maps.event.addListener(infoWindow, 'domready', function() {
        // Find the info window container
        const iwOuter = document.querySelector('.gm-style-iw');
        if (!iwOuter) return;
        
        // Remove existing style element if any
        const existingStyle = document.getElementById('infoWindowStyles');
        if (existingStyle) existingStyle.remove();
        
        // Add custom style to fix InfoWindow height and scrolling issues
        const style = document.createElement('style');
        style.id = 'infoWindowStyles';
        style.innerHTML = `
          .gm-style-iw {
            padding: 0 !important;
            overflow: visible !important;
          }
          .gm-style-iw-d {
            overflow: visible !important;
            max-height: none !important;
          }
          .gm-style-iw-c {
            max-height: none !important;
            padding-bottom: 10px !important;
          }
          .parking-info-card {
            padding-bottom: 10px;
          }
        `;
        document.head.appendChild(style);
        
        // Find the container that needs scrolling fixes
        const iwContainer = iwOuter.querySelector('.gm-style-iw-d');
        if (iwContainer) {
          iwContainer.style.overflow = 'visible';
          iwContainer.style.maxHeight = 'none';
          
          // Check if parent containers need adjustment too
          const iwBackground = iwOuter.parentElement;
          if (iwBackground) {
            const iwContent = iwBackground.querySelector('.gm-style-iw-c');
            if (iwContent) {
              iwContent.style.maxHeight = 'none';
              iwContent.style.overflow = 'visible';
            }
          }
        }
      });
      
      return infoWindow;
    }

    // Handle animations for scroll effects
    document.addEventListener('DOMContentLoaded', function() {
      // Show map container immediately with animation
      setTimeout(function() {
        document.querySelector('.map-container').classList.add('active');
      }, 300);
      
      // More sophisticated scroll detection
      const handleScrollAnimations = function() {
        const elements = document.querySelectorAll('.fade-in:not(.active), .slide-in-left:not(.active), .slide-in-right:not(.active)');
        
        elements.forEach(element => {
          const rect = element.getBoundingClientRect();
          const triggerPoint = window.innerHeight * 0.8; // 80% down the screen
          
          if (rect.top <= triggerPoint) {
            // Add staggered animation based on element position in DOM
            const delay = element.dataset.delay ? parseInt(element.dataset.delay) : 0;
            
            setTimeout(() => {
              element.classList.add('active');
            }, delay);
          }
        });
      };
      
      // Check for animations on initial load (for elements already in viewport)
      setTimeout(handleScrollAnimations, 500);
      
      // Add throttled scroll listener for better performance
      let scrollTimeout;
      window.addEventListener('scroll', function() {
        if (scrollTimeout) {
          clearTimeout(scrollTimeout);
        }
        scrollTimeout = setTimeout(handleScrollAnimations, 100);
      });
    });
  </script>

  <!-- Google Maps API with required libraries -->
  <script
    src="https://maps.googleapis.com/maps/api/js?key={{googleMapsApiKey}}&libraries=places&callback=initMap"
    defer
  ></script>
</body>
</html>