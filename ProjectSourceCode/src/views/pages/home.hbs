<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Parking Map</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
  
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

  <style>
    :root {
      --primary-color: #2c3e50;
      --accent-color: #3498db;
      --bg-color: #ecf0f1;
      --footer-bg: #34495e;
    }

    body, html {
      height: 100%;
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background-color: var(--bg-color);
    }

    header {
      background-color: var(--primary-color);
      color: white;
      padding: 20px 0;
    }

    .logo-container img {
      height: 50px;
    }

    .map-container {
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
    }

    .controls-container {
      background-color: white;
      border-radius: 8px 8px 0 0;
      padding: 15px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      z-index: 10;
    }

    .map-wrapper {
      flex-grow: 1;
      position: relative;
      border-radius: 0 0 8px 8px;
      overflow: hidden;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      height: 60vh;
    }

    #map {
      width: 100%;
      height: 100%;
    }

    .location-info {
      margin-bottom: 15px;
      text-align: center;
      min-height: 24px;
    }

    .map-controls {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
    }

    .search-container {
      flex-grow: 1;
    }

    #searchInput {
      width: 100%;
      padding: 10px 15px;
      border: 1px solid #ddd;
      border-radius: 20px;
      font-size: 14px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    #getCurrentLocation {
      white-space: nowrap;
      border-radius: 20px;
      padding: 8px 15px;
      background-color: var(--accent-color);
      border: none;
    }

    #getCurrentLocation:hover {
      background-color: #2980b9;
    }

    /* Promo Section Styles */
    .promo-section {
      padding: 5rem 0;
    }
    
    .image-stack {
      position: relative;
      width: 100%;
      max-width: 500px;
      margin: 0 auto;
    }
    
    .image-stack__item {
      position: absolute;
      width: 80%;
      box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
      border-radius: 8px;
      transition: all 0.3s;
    }
    
    .image-stack__item--bottom {
      left: 0;
      z-index: 1;
    }
    
    .image-stack__item--top {
      top: -2rem;
      right: 0;
      z-index: 2;
      width: 85%;
    }
    
    .image-stack__item--middle {
      left: 10%;
      top: 5rem;
      z-index: 3;
      width: 75%;
    }
    
    .promo-heading {
      line-height: 1.1;
      margin-bottom: 2rem;
    }
    
    /* Contact Section */
    .contact-section {
      background-color: #5289c1;
      padding: 5rem 0;
    }
    
    .contact-card {
      background: white;
      border-radius: 10px;
    }
    
    /* FAQ Section */
    .faq-section {
      padding: 5rem 0;
    }
    
    .accordion-button:not(.collapsed) {
      background-color: var(--accent-color);
      color: white;
    }
    
    @media (max-width: 768px) {
      .map-controls {
        flex-direction: column;
      }
      
      .image-stack {
        margin-bottom: 3rem;
      }
      
      .image-stack__item--top {
        top: 0;
        right: 0;
      }
      
      .image-stack__item--middle {
        top: 3rem;
        left: 5%;
      }
    }
  </style>
</head>
<body>
  <!-- Map Area -->
  <div class="container my-5">
    <div class="map-container">
      <div class="controls-container">
        <div class="location-info" id="locationStatus">
          <!-- Status messages will appear here -->
        </div>
        <div class="map-controls">
          <div class="search-container">
            <input
              type="text"
              id="searchInput"
              class="form-control"
              placeholder="Search for a location..."
            >
          </div>
          <div class="location-button-container">
            <button id="getCurrentLocation" class="btn btn-primary">
              <i class="bi bi-geo-alt"></i> Use My Location
            </button>
          </div>
        </div>
      </div>
      <div class="map-wrapper">
        <div id="map"></div>
      </div>
    </div>
  </div>

  <!-- Promo Section -->
  <section class="promo-section">
    <div class="container">
      <div class="row align-items-center">
        <!-- Left Column - Images -->
        <div class="col-lg-6">
          <div class="image-stack">
            <div class="image-stack__item image-stack__item--top">
              <img src="/resources/img/P4RK1.jpeg" alt="Parking spot" class="img-fluid rounded">
            </div>
            <div class="image-stack__item image-stack__item--middle">
              <img src="/resources/img/P4RK3.jpeg" alt="Parking garage" class="img-fluid rounded">
            </div>
            <div class="image-stack__item image-stack__item--bottom">
              <img src="/resources/img/P4RK03.jpeg" alt="Parking lot" class="img-fluid rounded">
            </div>
          </div>
        </div>
        
        <!-- Right Column - Text -->
        <div class="col-lg-6 ps-lg-5 mt-5 mt-lg-0">
          <div class="feature-list">
            <div class="feature-item mb-5">
              <h3 class="promo-heading">
                <span class="d-block display-4 fw-bold">SAVE TIME</span>
                <p class="lead mt-3">Book a space in just a few easy clicks</p>
              </h3>
            </div>
            
            <div class="feature-item mb-5">
              <h3 class="promo-heading">
                <span class="d-block display-4 fw-bold">DISCOVER</span>
                <span class="d-block display-4 fw-bold">AMAZING</span>
                <span class="d-block display-2 fw-bold text-primary">SPACES</span>
              </h3>
              <p class="lead mt-3">
                Find parking anywhere, for now or for later
              </p>
            </div>
            
            <div class="feature-item">
              <h3 class="promo-heading">
                <span class="d-block display-4 fw-bold">DRIVE</span>
                <span class="d-block display-4 fw-bold">ARRIVE</span>
                <span class="d-block display-2 fw-bold text-primary">& PARK</span>
              </h3>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- FAQ Section -->
  <section class="faq-section">
    <div class="container">
      <div class="text-center mb-5">
        <h2 class="display-4 fw-bold mb-3">
          <i class="bi bi-question-circle-fill me-2"></i>FAQ
        </h2>
        <p class="text-muted">Common questions about parking with us</p>
      </div>
      
      <div class="accordion" id="faqAccordion">
        <!-- Question 1 -->
        <div class="accordion-item mb-3 border-0">
          <h3 class="accordion-header">
            <button class="accordion-button collapsed rounded shadow-sm" type="button" 
                    data-bs-toggle="collapse" data-bs-target="#faq1"
                    aria-expanded="false">
              <i class="bi bi-search me-2"></i> How do I find parking locations?
            </button>
          </h3>
          <div id="faq1" class="accordion-collapse collapse" 
               data-bs-parent="#faqAccordion">
            <div class="accordion-body bg-light rounded-bottom">
              Use the search bar at the top to enter your destination, then check the map 
              for available spots. Available spaces appear in <span class="text-success">green</span>.
            </div>
          </div>
        </div>

        <!-- Question 2 -->
        <div class="accordion-item mb-3 border-0">
          <h3 class="accordion-header">
            <button class="accordion-button collapsed rounded shadow-sm" type="button" 
                    data-bs-toggle="collapse" data-bs-target="#faq2"
                    aria-expanded="false">
              <i class="bi bi-clock-history me-2"></i> Can I see my parking history?
            </button>
          </h3>
          <div id="faq2" class="accordion-collapse collapse" 
               data-bs-parent="#faqAccordion">
            <div class="accordion-body bg-light rounded-bottom">
              Yes! Your past parking sessions are saved under "My Passes" on the home page.
            </div>
          </div>
        </div>

        <!-- Question 3 -->
        <div class="accordion-item mb-3 border-0">
          <h3 class="accordion-header">
            <button class="accordion-button collapsed rounded shadow-sm" type="button" 
                    data-bs-toggle="collapse" data-bs-target="#faq3"
                    aria-expanded="false">
              <i class="bi bi-headset me-2"></i> How do I contact support?
            </button>
          </h3>
          <div id="faq3" class="accordion-collapse collapse" 
               data-bs-parent="#faqAccordion">
            <div class="accordion-body bg-light rounded-bottom">
              Use the "Contact Us" form below or email support@p4rk.com. 
              We respond within 24 hours.
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Google Maps JavaScript -->
  <script>
    let map;
    let userMarker;
    let searchMarker;
    let parkingMarkers = []; // Array to hold parking location markers
    const defaultLocation = { lat: 40.0150, lng: -105.2705 }; // Boulder, CO

    // Initialize map with default location
    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        center: defaultLocation,
        zoom: 14,
        mapId: 'DEMO_MAP_ID',
        mapTypeControl: false,
        fullscreenControl: false,
        streetViewControl: false,
        zoomControl: true,
        zoomControlOptions: {
          position: google.maps.ControlPosition.RIGHT_BOTTOM,
        },
      });

      // Create a search box
      const searchInput = document.getElementById("searchInput");
      const searchBox = new google.maps.places.SearchBox(searchInput);

      // Bias the search box results towards current map's viewport
      map.addListener('bounds_changed', () => {
        searchBox.setBounds(map.getBounds());
      });

      // Listen for the event fired when user selects a prediction
      searchBox.addListener('places_changed', () => {
        const places = searchBox.getPlaces();

        if (places.length === 0) return;
      
        // Remove previous search marker if it exists
        if (searchMarker) {
          searchMarker.setMap(null);
        }

        // Clear existing parking markers
        clearParkingMarkers();

        // For each place, get the location
        const place = places[0];
        
        if (!place.geometry || !place.geometry.location) {
          console.log("Returned place contains no geometry");
          return;
        }

        // Create a new marker for the place
        searchMarker = new google.maps.Marker({
          map,
          position: place.geometry.location,
          title: place.name,
          animation: google.maps.Animation.DROP,
          icon: {
            url: "https://maps.google.com/mapfiles/ms/icons/red-dot.png"
          }
        });

        // Add info window with place name
        const infoWindow = new google.maps.InfoWindow({
          content: `<div><strong>${place.name}</strong></div>`
        });

        searchMarker.addListener('click', () => {
          infoWindow.open(map, searchMarker);
        });

        // Center and zoom map to show selected location
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(16);
        }

        // Show success message
        document.getElementById('locationStatus').innerHTML = `<p class="text-success">Found: ${place.name}</p>`;
        setTimeout(() => {
          document.getElementById('locationStatus').innerHTML = '';
        }, 3000);

        // Find nearby parking locations
        findNearbyParking(place.geometry.location);
      });

      // Try to get user's current location
      getUserLocation();

      // Add button to recenter map on user location
      const locationButton = document.getElementById("getCurrentLocation");
      if (locationButton) {
        locationButton.addEventListener("click", getUserLocation);
      } else {
        console.error("Location button not found");
      }
    }

    // Clear all parking markers from the map
    function clearParkingMarkers() {
      for (let i = 0; i < parkingMarkers.length; i++) {
        parkingMarkers[i].setMap(null);
      }
      parkingMarkers = [];
    }

    // Find nearby parking locations
    function findNearbyParking(location) {
      const locationStatus = document.getElementById('locationStatus');
      locationStatus.innerHTML = '<p class="text-info"><i class="bi bi-hourglass-split"></i> Finding nearby parking...</p>';

      const request = {
        location: location,
        radius: 1000, // Search within 1km radius
        type: 'parking',
        // rankBy: google.maps.places.RankBy.DISTANCE
      };

      const service = new google.maps.places.PlacesService(map);
      
      service.nearbySearch(request, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          // Clear previous parking markers
          clearParkingMarkers();
          
          // Limit to 15 closest parking locations
          const maxResults = Math.min(results.length, 15);
          
          for (let i = 0; i < maxResults; i++) {
            const place = results[i];
            createParkingMarker(place);
          }
          
          locationStatus.innerHTML = `<p class="text-success"><i class="bi bi-check-circle"></i> Found ${maxResults} parking locations nearby</p>`;
          setTimeout(() => {
            locationStatus.innerHTML = '';
          }, 3000);
        } else {
          locationStatus.innerHTML = `<p class="text-warning"><i class="bi bi-exclamation-triangle"></i> Could not find parking locations (${status})</p>`;
          setTimeout(() => {
            locationStatus.innerHTML = '';
          }, 3000);
        }
      });
    }

    // Create a marker for a parking location
    function createParkingMarker(place) {
      const marker = new google.maps.Marker({
        map: map,
        position: place.geometry.location,
        title: place.name,
        icon: {
          url: "https://maps.google.com/mapfiles/ms/icons/green-dot.png"
        }
      });

      // Add info window with parking details
      let content = `<div><strong>${place.name || 'Parking'}</strong>`;
      if (place.vicinity) {
        content += `<br>${place.vicinity}`;
      }
      content += "</div>";
      
      const infoWindow = new google.maps.InfoWindow({ content });

      marker.addListener('click', () => {
        infoWindow.open(map, marker);
      });

      parkingMarkers.push(marker);
    }

    // Get user's current location
    function getUserLocation() {
      console.log("Getting user location");
      const locationStatus = document.getElementById('locationStatus');

      if (navigator.geolocation) {
        locationStatus.innerHTML = '<p class="text-info"><i class="bi bi-hourglass-split"></i> Getting your location...</p>';

        navigator.geolocation.getCurrentPosition(
          (position) => {
            console.log("Location obtained:", position.coords.latitude, position.coords.longitude);
            const userLocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            };

            // Center map on user location
            map.setCenter(userLocation);
            map.setZoom(14);

            // Add or update marker for user location
            if (userMarker) {
              userMarker.setPosition(userLocation);
            } else {
              userMarker = new google.maps.Marker({
                position: userLocation,
                map: map,
                title: "Your location",
                icon: {
                  url: "https://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                },
                animation: google.maps.Animation.DROP
              });

              // Add info window to user marker
              const userInfoWindow = new google.maps.InfoWindow({
                content: `<div><strong>Your Location</strong></div>`
              });
              
              userMarker.addListener('click', () => {
                userInfoWindow.open(map, userMarker);
              });
            }

            locationStatus.innerHTML = '<p class="text-success"><i class="bi bi-check-circle"></i> Location found!</p>';

            // Find nearby parking locations
            findNearbyParking(userLocation);

            setTimeout(() => {
              locationStatus.innerHTML = '';
            }, 3000);
          },
          (error) => {
            console.error("Error getting location", error);
            let errorMessage = "Unable to retrieve your location.";

            switch(error.code) {
              case error.PERMISSION_DENIED:
                errorMessage = "Location access denied. Please enable location services.";
                break;
              case error.POSITION_UNAVAILABLE:
                errorMessage = "Location information is unavailable.";
                break;
              case error.TIMEOUT:
                errorMessage = "The request to get your location timed out.";
                break;
            }

            locationStatus.innerHTML = `<p class='text-danger'><i class="bi bi-exclamation-triangle"></i> ${errorMessage}</p>`;

            // Use default location
            map.setCenter(defaultLocation);
          }
        );
      } else {
        locationStatus.innerHTML = "<p class='text-danger'><i class='bi bi-exclamation-triangle'></i> Geolocation is not supported by your browser.</p>";
      }
    }
  </script>

  <!-- Google Maps API with required libraries -->
  <script
    src="https://maps.googleapis.com/maps/api/js?key={{googleMapsApiKey}}&libraries=places&callback=initMap"
    defer
  ></script>
</body>
</html>